{
    "1": {
        "title": "The State of Node.js & JavaScript for Backend Development",
        "text": "In 2009, a new technology made its humble beginnings in the vast universe of backend development.Node.js was the first legitimate attempt to bring JavaScript to the server-side. Today, you'd be hard-pressed to find a web developer who hasn't heard about Node. Following its inception, it has split communities, triggered forum wars, and brought many to despair. Think I sound dramatic? Do a quick Google search. You'll land on a gold mine of controversy. Some arguments you'll stumble upon: \"Whatever happened to the axiom “Use the best tool for the job”? JavaScript on the server side is NEVER the best tool for the job.\"Some even sound poetic: \"Callback hell is real Debugging is a bitch JavaScript was not made for server-side",
        "date": "NOVEMBER 23, 2017"
    },
    "2": {
        "title": "Node.js + OpenCV for Face Recognition",
        "text": "Recently I have added the face recognition algorithms from OpenCV contrib to opencv4nodejs, an npm package, which allows you to use OpenCV in your Node.js application. Today we are going to take a look at the Fisher-, Eigen- and LBPH FaceRecognizers implemented in the OpenCVs’ face module and build a simple Node.js face recognition example. As always the source code for the examples can be found on my github repo. Let’s not waste any more time and get started! \n 1. Prepare the image data Before we can train the recognizers we have to collect some image data with faces. If you are as excited about The Walking Dead as I am, then you are probably familar with our test subjects. I collected 4 images of Daryl, Rick and evil boy Negan, 12 in total. As I simply picked some images from the web, we have to extract a subimage centered at the face of the character shown in each image. Therefore we will detect the characters’ face using OpenCVs’ CascadeClassifier class:",
        "date": "NOVEMBER 7, 2017"
    },
    "3": {
        "title": "The Performance Cost of Server Side Rendered React on Node.js",
        "text": "I like React as a templating engine, not only on the client side but on the server as well. Over the last year or two rendering templates with React.js on the server has become commonplace. Services from rather static content driven sites to Universal JavaScript Applications built on frameworks like Next.js are serving dynamic of server side rendered views using React. While I like the concept of the guarantees of structure and validity, I do recognise that there’s a lot of overhead in how it works for constructing just a single view server side. This is why I decided to examine just how much overhead there is compared to more traditional templating engines that work on strings and don’t guarantee structure of the generated HTML markup.",
        "date": "NOVEMBER 22, 2017"
    }
}
